import logging
import sqlite3
import re
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import os
from dotenv import load_dotenv

from bet_bot.apl_stats import apl_team_stats, apl_h2h_stats


load_dotenv()
logging.basicConfig(level=logging.INFO)
API_TOKEN = os.getenv('API_TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

def get_bet_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/history"),  KeyboardButton(text="/teamstats"), KeyboardButton(text="/bet")]
        ],
        resize_keyboard=True
    )

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )


def init_db():
    with sqlite3.connect('bet_history.db') as conn:
        conn.execute('''
        CREATE TABLE IF NOT EXISTS bets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            bet_type TEXT NOT NULL,
            odds REAL NOT NULL,
            stats TEXT NOT NULL,
            quality INTEGER NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        ''')

def add_bet(user_id: int, bet_type: str, odds: float, stats: str, quality: int):
    with sqlite3.connect('bet_history.db') as conn:
        conn.execute('''
        INSERT INTO bets (user_id, bet_type, odds, stats, quality, timestamp)
        VALUES (?, ?, ?, ?, ?, datetime('now', '+3 hours'))
        ''', (user_id, bet_type, odds, stats, quality))

def get_last_bets(user_id: int, limit: int = 5):
    with sqlite3.connect('bet_history.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
        SELECT bet_type, odds, stats, quality, 
               strftime('%d.%m.%Y %H:%M', timestamp) as formatted_time
        FROM bets 
        WHERE user_id = ? 
        ORDER BY timestamp DESC 
        LIMIT ?
        ''', (user_id, limit))
        return cursor.fetchall()

init_db()

class BetForm(StatesGroup):
    bet_type = State()
    odds = State()
    statistics = State()


@dp.message(Command("teamstats"))
async def cmd_teamstats(message: Message):
    team_names = sorted(apl_team_stats.keys())
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=name)] for name in team_names] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer("Choose a team to see EPL 2024/25 stats:", reply_markup=keyboard)

@dp.message(lambda m: m.text in apl_team_stats)
async def show_team_stats(message: Message):
    stats = apl_team_stats[message.text]
    text = (
        f"üèü Stats for {message.text} (EPL 2024/25)\n"
        f"------------------------------\n"
        f"üîπ Win percentage: {stats['win_percentage']}%\n"
        f"üîπ Avg goals scored per match: {stats['avg_goals_scored']}\n"
        f"üîπ Avg goals conceded per match: {stats['avg_goals_conceded']}\n"
        f"üîπ Top scorer: {stats['top_scorer']}\n"
        f"------------------------------\n"
        f"‚ÑπÔ∏è Use /teamstats for another team."
    )
    await message.answer(text, reply_markup=get_bet_type_keyboard())



class BetMatchForm(StatesGroup):
    match = State()
    bet_type = State()
    odds = State()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–≤–æ–∫ –Ω–∞ –ê–ü–õ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bet ‚Äî –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–∫–∏ –ø–æ –º–∞—Ç—á—É\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /teamstats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history ‚Äî –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫\n"
    )

@dp.message(Command("bet"))
async def cmd_bet(message: Message, state: FSMContext):
    team_names = sorted(apl_team_stats.keys())
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–ö–æ–º–∞–Ω–¥–∞1>-<–ö–æ–º–∞–Ω–¥–∞2>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Arsenal-Chelsea\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: " + ", ".join(team_names),
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BetMatchForm.match)

@dp.message(BetMatchForm.match)
async def process_bet_match(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_bet_type_keyboard())
        return
    try:
        teams = message.text.replace('‚Äî', '-').split('-')
        if len(teams) != 2:
            raise ValueError
        team1 = teams[0].strip()
        team2 = teams[1].strip()
        if team1 not in apl_team_stats or team2 not in apl_team_stats:
            raise ValueError
        await state.update_data(team1=team1, team2=team2)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü1"), KeyboardButton(text="–ü2"), KeyboardButton(text="–ù–∏—á—å—è")],
                [KeyboardButton(text="–¢–ë 2.5"), KeyboardButton(text="–¢–ú 2.5")],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏: –ü1, –ü2, –ù–∏—á—å—è, –¢–ë 2.5, –¢–ú 2.5", reply_markup=keyboard)
        await state.set_state(BetMatchForm.bet_type)
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –§–æ—Ä–º–∞—Ç: –ö–æ–º–∞–Ω–¥–∞1-–ö–æ–º–∞–Ω–¥–∞2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.", reply_markup=get_cancel_keyboard())

@dp.message(BetMatchForm.bet_type)
async def process_bet_match_type(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_bet_type_keyboard())
        return
    bet_type = message.text.strip().upper()
    valid_types = ["–ü1", "–ü2", "–ù–ò–ß–¨–Ø", "–¢–ë 2.5", "–¢–ú 2.5"]
    if bet_type not in valid_types:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=get_cancel_keyboard())
        return
    await state.update_data(bet_type=bet_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5):", reply_markup=get_cancel_keyboard())
    await state.set_state(BetMatchForm.odds)

@dp.message(BetMatchForm.odds)
async def process_bet_match_odds(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_bet_type_keyboard())
        return
    try:
        odds = float(message.text.strip())
        if odds <= 1:
            raise ValueError
    except ValueError:
        await message.answer("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_cancel_keyboard())
        return

    data = await state.get_data()
    team1, team2 = data["team1"], data["team2"]
    bet_type = data["bet_type"]
    user_id = message.from_user.id

    h2h_key = f"{team1}-{team2}"
    h2h_key_rev = f"{team2}-{team1}"
    team1_stats = apl_team_stats[team1]
    team2_stats = apl_team_stats[team2]
    h2h = apl_h2h_stats.get(h2h_key) or {
        "team1_win_percentage": 50.0,
        "draw_percentage": 30.0
    }
    if not apl_h2h_stats.get(h2h_key) and apl_h2h_stats.get(h2h_key_rev):
        h2h = apl_h2h_stats[h2h_key_rev]
        h2h = {
            "team1_win_percentage": 100 - h2h.get("team1_win_percentage", 50.0) - h2h.get("draw_percentage", 30.0),
            "draw_percentage": h2h.get("draw_percentage", 30.0)
        }

    if bet_type == "–ü1":
        win_team = team1_stats["win_percentage"]
        win_opponent = team2_stats["win_percentage"]
        head_to_head_win = h2h["team1_win_percentage"]
        head_to_head_draw = h2h["draw_percentage"]
        quality = calculate_outcome_quality(odds, win_team, win_opponent, head_to_head_win, head_to_head_draw)
        stats_str = f"–ü1: {team1} vs {team2} ({win_team}%/{win_opponent}%), H2H: {head_to_head_win}% –ø–æ–±–µ–¥, {head_to_head_draw}% –Ω–∏—á—å–∏—Ö"
    elif bet_type == "–ü2":
        win_team = team2_stats["win_percentage"]
        win_opponent = team1_stats["win_percentage"]
        h2h_swapped = apl_h2h_stats.get(f"{team2}-{team1}")
        if h2h_swapped:
            head_to_head_win = h2h_swapped["team1_win_percentage"]
            head_to_head_draw = h2h_swapped["draw_percentage"]
        else:
            head_to_head_win = 100 - h2h["team1_win_percentage"] - h2h["draw_percentage"]
            head_to_head_draw = h2h["draw_percentage"]
        quality = calculate_outcome_quality(odds, win_team, win_opponent, head_to_head_win, head_to_head_draw)
        stats_str = f"–ü2: {team2} vs {team1} ({win_team}%/{win_opponent}%), H2H: {head_to_head_win}% –ø–æ–±–µ–¥, {head_to_head_draw}% –Ω–∏—á—å–∏—Ö"
    elif bet_type == "–ù–ò–ß–¨–Ø":
        win_team = team1_stats["win_percentage"]
        win_opponent = team2_stats["win_percentage"]
        draw_perc = h2h["draw_percentage"]
        quality = calculate_draw_quality(odds, win_team, win_opponent, draw_perc)
        stats_str = f"–ù–∏—á—å—è: {team1} vs {team2} ({win_team}%/{win_opponent}%), H2H –Ω–∏—á—å–∏: {draw_perc}%"
    elif bet_type in ["–¢–ë 2.5", "–¢–ú 2.5"]:
        avg_goals_team = team1_stats["avg_goals_scored"]
        avg_goals_opponent = team2_stats["avg_goals_scored"]
        total_value = 2.5
        total_type = "–±–æ–ª—å—à–µ" if "–¢–ë" in bet_type else "–º–µ–Ω—å—à–µ"
        quality = calculate_total_quality(odds, avg_goals_team, avg_goals_opponent, total_value, total_type)
        stats_str = f"{bet_type}: {team1}({avg_goals_team}) vs {team2}({avg_goals_opponent}), —Ç–æ—Ç–∞–ª {total_type} {total_value}"
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏.", reply_markup=get_bet_type_keyboard())
        await state.clear()
        return

    response = (
        f"üéØ –°—Ç–∞–≤–∫–∞: {bet_type} –Ω–∞ –º–∞—Ç—á {team1} - {team2}\n"
        f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {odds}\n"
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_str}\n"
        f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–∫–∏: {quality}/10"
    )
    add_bet(user_id, bet_type, odds, stats_str, quality)
    await message.answer(response, reply_markup=get_bet_type_keyboard())
    await state.clear()


@dp.message(Command("history"))
async def cmd_history(message: Message):
    bets = get_last_bets(message.from_user.id)
    if not bets:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞.", reply_markup=get_bet_type_keyboard())
        return
    response = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:\n\n"
    for bet in bets:
        match = "-"
        match_search = re.search(r"(?:–Ω–∞ –º–∞—Ç—á\s*)?([A-Za-z–ê-–Ø–∞-—è—ë–Å\s\-]+)[\-‚Äì‚Äî]\s*([A-Za-z–ê-–Ø–∞-—è—ë–Å\s\-]+)", bet[2])
        if not match_search:
            match_search = re.search(r"([A-Za-z–ê-–Ø–∞-—è—ë–Å\s\-]+)\s+vs\.?\s+([A-Za-z–ê-–Ø–∞-—è—ë–Å\s\-]+)", bet[2], re.IGNORECASE)
        if match_search:
            match = f"{match_search.group(1).strip()} - {match_search.group(2).strip()}"
        else:
            # fallback: —á–∞—Å—Ç—å stats –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π
            match = bet[2].split(",")[0].replace("–ü1:", "").replace("–ü2:", "").replace("–ù–∏—á—å—è:", "").strip()
        response += (
            f"‚ñ∏ {bet[0]}\n"
            f"–ú–∞—Ç—á: {match}\n"
            f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {bet[1]}\n"
            f"–û—Ü–µ–Ω–∫–∞: {bet[3]}/10\n"
            f"–î–∞—Ç–∞: {bet[4]}\n\n"
        )
    await message.answer(response, reply_markup=get_bet_type_keyboard())

@dp.message(BetForm.bet_type)
async def process_bet_type(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_bet_type_keyboard())
        return
    bet_type = message.text.strip()
    if bet_type not in ["–ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã", "–ù–∏—á—å—è", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ", "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(bet_type=bet_type)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BetForm.odds)

@dp.message(BetForm.odds)
async def process_odds(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_bet_type_keyboard())
        return
    try:
        odds = float(message.text.strip())
        if odds <= 1:
            raise ValueError
    except ValueError:
        await message.answer("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–∏–º 1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(odds=odds)
    data = await state.get_data()
    bet_type = data["bet_type"]

    if bet_type == "–ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã> <–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞> "
            "<–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –≤ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö> <–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∏—á—å–∏—Ö –≤ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö>\n"
            "–ü—Ä–∏–º–µ—Ä: 60 40 50 20",
            reply_markup=get_cancel_keyboard()
        )
    elif bet_type == "–ù–∏—á—å—è":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã> <–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞> "
            "<–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∏—á—å–∏—Ö –≤ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö>\n"
            "–ü—Ä–∏–º–µ—Ä: 60 40 50",
            reply_markup=get_cancel_keyboard()
        )
    else:  # –¢–æ—Ç–∞–ª—ã
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã> <–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞> <–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—Ç–∞–ª–∞>\n"
            "–ü—Ä–∏–º–µ—Ä: 1.6 2.4 2.5",
            reply_markup=get_cancel_keyboard()
        )
    await state.set_state(BetForm.statistics)

@dp.message(BetForm.statistics)
async def process_statistics(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_bet_type_keyboard())
        return
    data = await state.get_data()
    bet_type = data["bet_type"]
    odds = data["odds"]
    user_id = message.from_user.id
    try:
        if bet_type == "–ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã":
            stats = list(map(float, message.text.strip().split()))
            if len(stats) != 4:
                raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 4 —á–∏—Å–ª–∞")
            win_team, win_opponent, head_to_head_win, head_to_head_draw = stats
            if not all(0 <= x <= 100 for x in stats):
                raise ValueError("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100")
            if (head_to_head_win + head_to_head_draw) > 100:
                raise ValueError("–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ–±–µ–¥ –∏ –Ω–∏—á—å–∏—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚â§ 100")
            quality = calculate_outcome_quality(odds, win_team, win_opponent, head_to_head_win, head_to_head_draw)
            stats_str = f"–ü–æ–±–µ–¥—ã: {win_team}%/{win_opponent}%, –û—á–Ω—ã–µ: {head_to_head_win}%/{head_to_head_draw}%"
            response = (
                f"üéØ –°—Ç–∞–≤–∫–∞: {bet_type}\n"
                f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {odds}\n"
                f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_str}\n"
                f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–∫–∏: {quality}/10"
            )
        elif bet_type == "–ù–∏—á—å—è":
            stats = list(map(float, message.text.strip().split()))
            if len(stats) != 3:
                raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞")
            win_team, win_opponent, head_to_head_draw = stats
            if not all(0 <= x <= 100 for x in stats):
                raise ValueError("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100")
            quality = calculate_draw_quality(odds, win_team, win_opponent, head_to_head_draw)
            stats_str = f"–ü–æ–±–µ–¥—ã: {win_team}%/{win_opponent}%, –ù–∏—á—å–∏: {head_to_head_draw}%"
            response = (
                f"üéØ –°—Ç–∞–≤–∫–∞: {bet_type}\n"
                f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {odds}\n"
                f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_str}\n"
                f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–∫–∏: {quality}/10"
            )
        else:  # –¢–æ—Ç–∞–ª—ã
            stats = list(map(float, message.text.strip().split()))
            if len(stats) != 3:
                raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞")
            avg_goals_team, avg_goals_opponent, total_value = stats
            if avg_goals_team < 0 or avg_goals_opponent < 0:
                raise ValueError("–°—Ä–µ–¥–Ω–∏–µ –≥–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ‚â• 0")
            if (total_value * 10) % 5 != 0:
                raise ValueError("–¢–æ—Ç–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ X.5 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5)")
            total_type = "–±–æ–ª—å—à–µ" if "–±–æ–ª—å—à–µ" in bet_type.lower() else "–º–µ–Ω—å—à–µ"
            quality = calculate_total_quality(odds, avg_goals_team, avg_goals_opponent, total_value, total_type)
            stats_str = f"–ì–æ–ª—ã: {avg_goals_team}/{avg_goals_opponent}, –¢–æ—Ç–∞–ª: {total_type} {total_value}"
            response = (
                f"üéØ –°—Ç–∞–≤–∫–∞: {bet_type}\n"
                f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {odds}\n"
                f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_str}\n"
                f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–∫–∏: {quality}/10"
            )
        add_bet(user_id, bet_type, odds, stats_str, quality)
        await message.answer(response, reply_markup=get_bet_type_keyboard())
        await state.clear()
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_cancel_keyboard())

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–≤–∫–∏ ---
def calculate_outcome_quality(odds, win_team, win_opponent, head_to_head_win, head_to_head_draw):
    stat_adv = (win_team - win_opponent) / 100  
    h2h_score = (head_to_head_win * 0.6 + head_to_head_draw * 0.4) / 100  
    stat_prob = max(0, min(1, 0.5 * (win_team / 100) + 0.5 * h2h_score))  
    implied_prob = 1 / odds if odds > 0 else 0
    value = stat_prob - implied_prob  
    raw_score = (stat_adv * 0.2 + h2h_score * 0.2 + value * 0.6) * 10 + 5  
    normalized_quality = int(round(max(1, min(10, raw_score))))
    return normalized_quality

def calculate_draw_quality(odds, win_team, win_opponent, head_to_head_draw):
    base_draw_probability = 50 - abs(win_team - win_opponent) * 0.5
    head_to_head_factor = head_to_head_draw
    odds_factor = 1 + (odds - 1) / 5
    raw_score = (base_draw_probability * 0.6 + head_to_head_factor * 0.4) * odds_factor
    normalized_quality = max(1, min(10, int(5 + raw_score / 20)))
    return normalized_quality

def calculate_total_quality(odds, avg_goals_team, avg_goals_opponent, total_value, total_type):
    if (total_value * 10 % 5 != 0) or total_value < 0:
        raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—Ç–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–∞ x.5, –≥–¥–µ x –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–∞–ø—Ä–∏–º–µ—Ä 2.5, 3.5 –∏ —Ç.–¥.")
    avg_goals = (avg_goals_team + avg_goals_opponent) / 2
    implied_probability = 1 / odds if odds > 0 else 0

    if total_type.lower() == "–±–æ–ª—å—à–µ":
        goal_gap = avg_goals - total_value
    elif total_type.lower() == "–º–µ–Ω—å—à–µ":
        goal_gap = total_value - avg_goals
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ—Ç–∞–ª–∞")

    probability_factor = 0.5 + (goal_gap * 0.2)
    probability_factor = max(0, min(1, probability_factor))

    value = probability_factor - implied_probability

    odds_impact = odds ** 0.7  

    quality = 5 + 4 * value + 2 * (odds_impact - 1) + 1 * (probability_factor - 0.5)
    quality = int(round(max(1, min(10, quality))))
    return quality

async def async_main():
    await dp.start_polling(bot)

def main():
    import asyncio
    asyncio.run(async_main())

if __name__ == "__main__":
    main()